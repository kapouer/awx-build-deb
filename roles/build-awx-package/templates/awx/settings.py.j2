import os
import platform
import sys

sys.path.append('/etc/awx/')

from credentials import *

def get_secret():
    if os.path.exists("{{ awx_secret_key_file }}"):
        return file('{{ awx_secret_key_file }}', 'rb').read().strip()
    return os.getenv("SECRET_KEY", "{{ awx_fallback_secret_key }}")

HOSTNAME = platform.node()

ADMINS = ()

STATIC_ROOT = '{{ awx_ui_path }}/static'

PROJECTS_ROOT = '{{ awx_home_path }}/projects'

JOBOUTPUT_ROOT = '{{ awx_home_path }}/job_status'

SECRET_KEY = get_secret()

ALLOWED_HOSTS = ['*']

INTERNAL_API_URL = 'http://127.0.0.1:8052'

AWX_TASK_ENV['HOME'] = '{{ awx_home_path }}'

# Container environments don't like chroots
AWX_PROOT_ENABLED = False

ANSIBLE_VENV_PATH = '/usr/local/'

CLUSTER_HOST_ID = HOSTNAME
SYSTEM_UUID = '00000000-0000-0000-0000-000000000000'
#CELERY_QUEUES += (Queue(CLUSTER_HOST_ID, Exchange(CLUSTER_HOST_ID), routing_key=CLUSTER_HOST_ID),)
#CELERY_ROUTES['awx.main.tasks.cluster_node_heartbeat'] = {'queue': CLUSTER_HOST_ID, 'routing_key': CLUSTER_HOST_ID}
#CELERY_ROUTES['awx.main.tasks.purge_old_stdout_files'] = {'queue': CLUSTER_HOST_ID, 'routing_key': CLUSTER_HOST_ID}

# Needed for http login
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

###############################################################################
# EMAIL SETTINGS
###############################################################################

SERVER_EMAIL = 'root@%s' % HOSTNAME
DEFAULT_FROM_EMAIL = 'webmaster@%s' % HOSTNAME
EMAIL_SUBJECT_PREFIX = '[AWX] '

EMAIL_HOST = os.getenv("EMAIL_HOST", 'localhost')
EMAIL_PORT = os.getenv("EMAIL_PORT", 25),
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", ''),
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", ''),
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", False),

LOGGING['handlers']['console'] = {
    '()': 'logging.StreamHandler',
    'level': 'DEBUG',
    'formatter': 'simple',
}

LOGGING['handlers']['tower_warnings']['filename'] = '{{ awx_log_path }}/tower.log'
LOGGING['handlers']['callback_receiver']['filename'] = '{{ awx_log_path }}/callback_receiver.log'
LOGGING['handlers']['dispatcher']['filename'] = '{{ awx_log_path }}/dispatcher.log'
LOGGING['handlers']['task_system']['filename'] = '{{ awx_log_path }}/task_system.log'
LOGGING['handlers']['fact_receiver']['filename'] = '{{ awx_log_path }}/fact_receiver.log'
LOGGING['handlers']['management_playbooks']['filename'] = '{{ awx_log_path }}/management_playbooks.log'
LOGGING['handlers']['system_tracking_migrations']['filename'] = '{{ awx_log_path }}/tower_system_tracking_migrations.log'
LOGGING['handlers']['rbac_migrations']['filename'] = '{{ awx_log_path }}/tower_rbac_migrations.log'

LOGGING['loggers']['django.request']['handlers'] = ['console']
LOGGING['loggers']['rest_framework.request']['handlers'] = ['console']
LOGGING['loggers']['awx']['handlers'] = ['console', 'external_logger']
LOGGING['loggers']['awx.main.commands.run_callback_receiver']['handlers'] = ['console']
LOGGING['loggers']['awx.main.tasks']['handlers'] = ['console', 'external_logger']
LOGGING['loggers']['awx.main.scheduler']['handlers'] = ['console', 'external_logger']
LOGGING['loggers']['django_auth_ldap']['handlers'] = ['console']
LOGGING['loggers']['social']['handlers'] = ['console']
LOGGING['loggers']['system_tracking_migrations']['handlers'] = ['console']
LOGGING['loggers']['rbac_migrations']['handlers'] = ['console']
LOGGING['loggers']['awx.isolated.manager.playbooks']['handlers'] = ['console']
LOGGING['handlers']['callback_receiver'] = {'class': 'logging.NullHandler'}
LOGGING['handlers']['fact_receiver'] = {'class': 'logging.NullHandler'}
LOGGING['handlers']['task_system'] = {'class': 'logging.NullHandler'}
LOGGING['handlers']['tower_warnings'] = {'class': 'logging.NullHandler'}
LOGGING['handlers']['rbac_migrations'] = {'class': 'logging.NullHandler'}
LOGGING['handlers']['system_tracking_migrations'] = {'class': 'logging.NullHandler'}
LOGGING['handlers']['management_playbooks'] = {'class': 'logging.NullHandler'}

DATABASES = {
    'default': {
        'ATOMIC_REQUESTS': True,
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("DATABASE_NAME", None),
#        'USER': os.getenv("DATABASE_USER", None),
#        'PASSWORD': os.getenv("DATABASE_PASSWORD", None),
#        'HOST': os.getenv("DATABASE_HOST", None),
#        'PORT': os.getenv("DATABASE_PORT", None),
    }
}

#
####CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672/%2F'
#

BROKER_URL = 'amqp://{}:{}@{}:{}/{}'.format(
    os.getenv("RABBITMQ_USER", None),
    os.getenv("RABBITMQ_PASSWORD", None),
    os.getenv("RABBITMQ_HOST", None),
    os.getenv("RABBITMQ_PORT", None),
    os.getenv("RABBITMQ_VHOST", None))

CHANNEL_LAYERS = {
    'default': {'BACKEND': 'asgi_amqp.AMQPChannelLayer',
                'ROUTING': 'awx.main.routing.channel_routing',
                'CONFIG': {'url': BROKER_URL}}
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '{}:{}'.format(os.getenv("MEMCACHED_HOST", None),
                                   os.getenv("MEMCACHED_PORT", None))
    },
    'ephemeral': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
}